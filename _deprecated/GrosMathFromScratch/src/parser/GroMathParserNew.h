/**
 * LR parser for C++ generated by the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 *   npm install -g syntax-cli
 *
 *   syntax-cli --help
 *
 * To regenerate run:
 *
 *   syntax-cli \
 *     --grammar ~/path-to-grammar-file \
 *     --mode <parsing-mode> \
 *     --output ~/ParserClassName.h
 */
#ifndef __Syntax_LR_Parser_h
#define __Syntax_LR_Parser_h

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"

#include <assert.h>
#include <array>
#include <iostream>
#include <map>
#include <memory>
#include <regex>
#include <sstream>
#include <string>
#include <vector>

// ------------------------------------
// Module include prologue.
//
// Should include at least value/result type:
//
// type Value = <...>;
//
// Or struct Value { ... };
//
// Can also include parsing hooks:
//
//   void onParseBegin(const Parser& parser, const std::string& str) {
//     ...
//   }
//
//   void onParseBegin(const Parser& parser, const Value& result) {
//     ...
//   }
//
// clang-format off
#include "ast.hpp"

using Value = std::unique_ptr<MainAST>;  // clang-format on

namespace syntax {

/**
 * Tokenizer class.
 */
// clang-format off
/**
 * Generic tokenizer used by the parser in the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 */

#ifndef __Syntax_Tokenizer_h
#define __Syntax_Tokenizer_h

class Tokenizer;

// ------------------------------------------------------------------
// TokenType.

enum class TokenType {
  __EMPTY = -1,
  // clang-format off
  Identifier = 21,
  Expr = 22,
  ConstString = 23,
  ConstInt = 24,
  TOKEN_TYPE_25 = 25,
  TOKEN_TYPE_26 = 26,
  TOKEN_TYPE_27 = 27,
  TOKEN_TYPE_28 = 28,
  TOKEN_TYPE_29 = 29,
  TOKEN_TYPE_30 = 30,
  TOKEN_TYPE_31 = 31,
  TOKEN_TYPE_32 = 32,
  TOKEN_TYPE_33 = 33,
  TOKEN_TYPE_34 = 34,
  TOKEN_TYPE_35 = 35,
  TOKEN_TYPE_36 = 36,
  TOKEN_TYPE_37 = 37,
  TOKEN_TYPE_38 = 38,
  TOKEN_TYPE_39 = 39,
  TOKEN_TYPE_40 = 40,
  TOKEN_TYPE_41 = 41,
  TOKEN_TYPE_42 = 42,
  TOKEN_TYPE_43 = 43,
  TOKEN_TYPE_44 = 44,
  TOKEN_TYPE_45 = 45,
  TOKEN_TYPE_46 = 46,
  TOKEN_TYPE_47 = 47,
  TOKEN_TYPE_48 = 48,
  TOKEN_TYPE_49 = 49,
  TOKEN_TYPE_50 = 50,
  TOKEN_TYPE_51 = 51,
  TOKEN_TYPE_52 = 52,
  TOKEN_TYPE_53 = 53,
  TOKEN_TYPE_54 = 54,
  TOKEN_TYPE_55 = 55,
  TOKEN_TYPE_56 = 56,
  TOKEN_TYPE_57 = 57,
  TOKEN_TYPE_58 = 58,
  TOKEN_TYPE_59 = 59,
  TOKEN_TYPE_60 = 60,
  TOKEN_TYPE_61 = 61,
  TOKEN_TYPE_62 = 62,
  TOKEN_TYPE_63 = 63,
  TOKEN_TYPE_64 = 64,
  TOKEN_TYPE_65 = 65,
  TOKEN_TYPE_66 = 66,
  __EOF = 67
  // clang-format on
};

// ------------------------------------------------------------------
// Token.

struct Token {
  TokenType type;
  std::string value;

  int startOffset;
  int endOffset;
  int startLine;
  int endLine;
  int startColumn;
  int endColumn;
};

using SharedToken = std::shared_ptr<Token>;

typedef TokenType (*LexRuleHandler)(const Tokenizer&, const std::string&);

// ------------------------------------------------------------------
// Lex rule: [regex, handler]

struct LexRule {
  std::regex regex;
  LexRuleHandler handler;
};

// ------------------------------------------------------------------
// Token.

enum TokenizerState {
  // clang-format off
  INITIAL
  // clang-format on
};

// ------------------------------------------------------------------
// Tokenizer.

class Tokenizer {
 public:
  /**
   * Initializes a parsing string.
   */
  void initString(const std::string& str) {
    str_ = str;

    // Initialize states.
    states_.clear();
    states_.push_back(TokenizerState::INITIAL);

    cursor_ = 0;
    currentLine_ = 1;
    currentColumn_ = 0;
    currentLineBeginOffset_ = 0;

    tokenStartOffset_ = 0;
    tokenEndOffset_ = 0;
    tokenStartLine_ = 0;
    tokenEndLine_ = 0;
    tokenStartColumn_ = 0;
    tokenEndColumn_ = 0;
  }

  /**
   * Whether there are still tokens in the stream.
   */
  inline bool hasMoreTokens() { return cursor_ <= str_.length(); }

  /**
   * Returns current tokenizing state.
   */
  TokenizerState getCurrentState() { return states_.back(); }

  /**
   * Enters a new state pushing it on the states stack.
   */
  void pushState(TokenizerState state) { states_.push_back(state); }

  /**
   * Alias for `push_state`.
   */
  void begin(TokenizerState state) { states_.push_back(state); }

  /**
   * Exits a current state popping it from the states stack.
   */
  TokenizerState popState() {
    auto state = states_.back();
    states_.pop_back();
    return state;
  }

  /**
   * Returns next token.
   */
  SharedToken getNextToken() {
    if (!hasMoreTokens()) {
      yytext = __EOF;
      return toToken(TokenType::__EOF);
    }

    auto strSlice = str_.substr(cursor_);

    auto lexRulesForState = lexRulesByStartConditions_.at(getCurrentState());

    for (const auto& ruleIndex : lexRulesForState) {
      auto rule = lexRules_[ruleIndex];
      std::smatch sm;

      if (std::regex_search(strSlice, sm, rule.regex)) {
        yytext = sm[0];

        captureLocations_(yytext);
        cursor_ += yytext.length();

        // Manual handling of EOF token (the end of string). Return it
        // as `EOF` symbol.
        if (yytext.length() == 0) {
          cursor_++;
        }

        auto tokenType = rule.handler(*this, yytext);

        if (tokenType == TokenType::__EMPTY) {
          return getNextToken();
        }

        return toToken(tokenType);
      }
    }

    if (isEOF()) {
      cursor_++;
      yytext = __EOF;
      return toToken(TokenType::__EOF);
    }

    throwUnexpectedToken(std::string(1, strSlice[0]), currentLine_,
                         currentColumn_);
  }

  /**
   * Whether the cursor is at the EOF.
   */
  inline bool isEOF() { return cursor_ == str_.length(); }

  SharedToken toToken(TokenType tokenType) {
    return std::shared_ptr<Token>(new Token{
        .type = tokenType,
        .value = yytext,
        .startOffset = tokenStartOffset_,
        .endOffset = tokenEndOffset_,
        .startLine = tokenStartLine_,
        .endLine = tokenEndLine_,
        .startColumn = tokenStartColumn_,
        .endColumn = tokenEndColumn_,
    });
  }

  /**
   * Throws default "Unexpected token" exception, showing the actual
   * line from the source, pointing with the ^ marker to the bad token.
   * In addition, shows `line:column` location.
   */
  [[noreturn]] void throwUnexpectedToken(const std::string& symbol, int line,
                                         int column) {
    std::stringstream ss{str_};
    std::string lineStr;
    int currentLine = 1;

    while (currentLine++ <= line) {
      std::getline(ss, lineStr, '\n');
    }

    auto pad = std::string(column, ' ');

    std::stringstream errMsg;

    errMsg << "Syntax Error:\n\n"
           << lineStr << "\n"
           << pad << "^\nUnexpected token \"" << symbol << "\" at " << line
           << ":" << column << "\n\n";

    std::cerr << errMsg.str();
    std::exit(EXIT_FAILURE);
  }

  /**
   * Matched text.
   */
  std::string yytext;

 private:
  /**
   * Captures token locations.
   */
  void captureLocations_(const std::string& matched) {
    auto len = matched.length();

    // Absolute offsets.
    tokenStartOffset_ = cursor_;

    // Line-based locations, start.
    tokenStartLine_ = currentLine_;
    tokenStartColumn_ = tokenStartOffset_ - currentLineBeginOffset_;

    // Extract `\n` in the matched token.
    std::stringstream ss{matched};
    std::string lineStr;
    std::getline(ss, lineStr, '\n');
    while (ss.tellg() > 0 && ss.tellg() <= len) {
      currentLine_++;
      currentLineBeginOffset_ = tokenStartOffset_ + ss.tellg();
      std::getline(ss, lineStr, '\n');
    }

    tokenEndOffset_ = cursor_ + len;

    // Line-based locations, end.
    tokenEndLine_ = currentLine_;
    tokenEndColumn_ = tokenEndOffset_ - currentLineBeginOffset_;
    currentColumn_ = tokenEndColumn_;
  }

  /**
   * Lexical rules.
   */
  // clang-format off
  static constexpr size_t LEX_RULES_COUNT = 48;
  static std::array<LexRule, LEX_RULES_COUNT> lexRules_;
  static std::map<TokenizerState, std::vector<size_t>> lexRulesByStartConditions_;
  // clang-format on

  /**
   * Special EOF token.
   */
  static std::string __EOF;

  /**
   * Tokenizing string.
   */
  std::string str_;

  /**
   * Cursor for current symbol.
   */
  int cursor_;

  /**
   * States.
   */
  std::vector<TokenizerState> states_;

  /**
   * Line-based location tracking.
   */
  int currentLine_;
  int currentColumn_;
  int currentLineBeginOffset_;

  /**
   * Location data of a matched token.
   */
  int tokenStartOffset_;
  int tokenEndOffset_;
  int tokenStartLine_;
  int tokenEndLine_;
  int tokenStartColumn_;
  int tokenEndColumn_;
};

// ------------------------------------------------------------------
// Lexical rule handlers.

std::string Tokenizer::__EOF("$");

// clang-format off
inline TokenType _lexRule1(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_25;
}

inline TokenType _lexRule2(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_26;
}

inline TokenType _lexRule3(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_27;
}

inline TokenType _lexRule4(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_28;
}

inline TokenType _lexRule5(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_29;
}

inline TokenType _lexRule6(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_30;
}

inline TokenType _lexRule7(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_31;
}

inline TokenType _lexRule8(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_32;
}

inline TokenType _lexRule9(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_33;
}

inline TokenType _lexRule10(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_34;
}

inline TokenType _lexRule11(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_35;
}

inline TokenType _lexRule12(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_36;
}

inline TokenType _lexRule13(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::;'";
}

inline TokenType _lexRule14(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_38;
}

inline TokenType _lexRule15(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_39;
}

inline TokenType _lexRule16(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_40;
}

inline TokenType _lexRule17(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_41;
}

inline TokenType _lexRule18(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_42;
}

inline TokenType _lexRule19(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_43;
}

inline TokenType _lexRule20(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_44;
}

inline TokenType _lexRule21(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_45;
}

inline TokenType _lexRule22(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_46;
}

inline TokenType _lexRule23(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_47;
}

inline TokenType _lexRule24(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_48;
}

inline TokenType _lexRule25(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_49;
}

inline TokenType _lexRule26(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_50;
}

inline TokenType _lexRule27(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_51;
}

inline TokenType _lexRule28(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_52;
}

inline TokenType _lexRule29(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_53;
}

inline TokenType _lexRule30(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_54;
}

inline TokenType _lexRule31(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_55;
}

inline TokenType _lexRule32(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_56;
}

inline TokenType _lexRule33(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_57;
}

inline TokenType _lexRule34(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_58;
}

inline TokenType _lexRule35(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_59;
}

inline TokenType _lexRule36(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_60;
}

inline TokenType _lexRule37(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_61;
}

inline TokenType _lexRule38(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_62;
}

inline TokenType _lexRule39(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_63;
}

inline TokenType _lexRule40(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_64;
}

inline TokenType _lexRule41(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_65;
}

inline TokenType _lexRule42(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_66;
}

inline TokenType _lexRule43(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::__EMPTY;
}

inline TokenType _lexRule44(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::__EMPTY;
}

inline TokenType _lexRule45(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::__EMPTY;
}

inline TokenType _lexRule46(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::ConstString;
}

inline TokenType _lexRule47(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::ConstInt;
}

inline TokenType _lexRule48(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::Identifier;
}
// clang-format on

// ------------------------------------------------------------------
// Lexical rules.

// clang-format off
std::array<LexRule, Tokenizer::LEX_RULES_COUNT> Tokenizer::lexRules_ = {{
  {std::regex(R"(^obj)"), &_lexRule1},
  {std::regex(R"(^\{)"), &_lexRule2},
  {std::regex(R"(^\})"), &_lexRule3},
  {std::regex(R"(^\->)"), &_lexRule4},
  {std::regex(R"(^,)"), &_lexRule5},
  {std::regex(R"(^fn)"), &_lexRule6},
  {std::regex(R"(^\()"), &_lexRule7},
  {std::regex(R"(^\))"), &_lexRule8},
  {std::regex(R"(^if)"), &_lexRule9},
  {std::regex(R"(^else)"), &_lexRule10},
  {std::regex(R"(^while)"), &_lexRule11},
  {std::regex(R"(^for)"), &_lexRule12},
  {std::regex(R"(^;)"), &_lexRule13},
  {std::regex(R"(^=)"), &_lexRule14},
  {std::regex(R"(^\+=)"), &_lexRule15},
  {std::regex(R"(^\-=)"), &_lexRule16},
  {std::regex(R"(^\*=)"), &_lexRule17},
  {std::regex(R"(^\/=)"), &_lexRule18},
  {std::regex(R"(^%=)"), &_lexRule19},
  {std::regex(R"(^\^=)"), &_lexRule20},
  {std::regex(R"(^<<=)"), &_lexRule21},
  {std::regex(R"(^>>=)"), &_lexRule22},
  {std::regex(R"(^\^\^=)"), &_lexRule23},
  {std::regex(R"(^\+\+)"), &_lexRule24},
  {std::regex(R"(^\-\-)"), &_lexRule25},
  {std::regex(R"(^!)"), &_lexRule26},
  {std::regex(R"(^\-)"), &_lexRule27},
  {std::regex(R"(^\+)"), &_lexRule28},
  {std::regex(R"(^\*)"), &_lexRule29},
  {std::regex(R"(^\/)"), &_lexRule30},
  {std::regex(R"(^%)"), &_lexRule31},
  {std::regex(R"(^<<)"), &_lexRule32},
  {std::regex(R"(^>>)"), &_lexRule33},
  {std::regex(R"(^\^)"), &_lexRule34},
  {std::regex(R"(^\^\^)"), &_lexRule35},
  {std::regex(R"(^&)"), &_lexRule36},
  {std::regex(R"(^\|)"), &_lexRule37},
  {std::regex(R"(^&&)"), &_lexRule38},
  {std::regex(R"(^\|\|)"), &_lexRule39},
  {std::regex(R"(^return)"), &_lexRule40},
  {std::regex(R"(^break)"), &_lexRule41},
  {std::regex(R"(^continue)"), &_lexRule42},
  {std::regex(R"(^\/\/.*)"), &_lexRule43},
  {std::regex(R"(^\/\*[\s\S]*?\*\/)"), &_lexRule44},
  {std::regex(R"(^\s+)"), &_lexRule45},
  {std::regex(R"(^"[^\"]*")"), &_lexRule46},
  {std::regex(R"(^\d+)"), &_lexRule47},
  {std::regex(R"(^[a-zA-Z_$][a-zA-Z_$0-9]*)"), &_lexRule48}
}};
std::map<TokenizerState, std::vector<size_t>> Tokenizer::lexRulesByStartConditions_ =  {{TokenizerState::INITIAL, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47}}};
// clang-format on

#endif
// clang-format on

#define POP_V()              \
  parser.valuesStack.back(); \
  parser.valuesStack.pop_back()

#define POP_T()              \
  parser.tokensStack.back(); \
  parser.tokensStack.pop_back()

#define PUSH_VR() parser.valuesStack.push_back(__)
#define PUSH_TR() parser.tokensStack.push_back(__)

/**
 * Parsing table type.
 */
enum class TE {
  Accept,
  Shift,
  Reduce,
  Transit,
};

/**
 * Parsing table entry.
 */
struct TableEntry {
  TE type;
  int value;
};

// clang-format off
class GroMathParserNew;
// clang-format on

using yyparse = GroMathParserNew;

typedef void (*ProductionHandler)(yyparse&);

/**
 * Encoded production.
 *
 * opcode - encoded index
 * rhsLength - length of the RHS to pop.
 */
struct Production {
  int opcode;
  int rhsLength;
  ProductionHandler handler;
};

// Key: Encoded symbol (terminal or non-terminal) index
// Value: TableEntry
using Row = std::map<int, TableEntry>;

/**
 * Parser class.
 */
// clang-format off
class GroMathParserNew {
  // clang-format on
 public:
  /**
   * Parsing values stack.
   */
  std::vector<Value> valuesStack;

  /**
   * Token values stack.
   */
  std::vector<std::string> tokensStack;

  /**
   * Parsing states stack.
   */
  std::vector<int> statesStack;

  /**
   * Tokenizer.
   */
  Tokenizer tokenizer;

  /**
   * Previous state to calculate the next one.
   */
  int previousState;

  /**
   * Parses a string.
   */
  Value parse(const std::string& str) {
    // clang-format off
    
    // clang-format on

    // Initialize the tokenizer and the string.
    tokenizer.initString(str);

    // Initialize the stacks.
    valuesStack.clear();
    tokensStack.clear();
    statesStack.clear();

    // Initial 0 state.
    statesStack.push_back(0);

    auto token = tokenizer.getNextToken();
    auto shiftedToken = token;

    // Main parsing loop.
    for (;;) {
      auto state = statesStack.back();
      auto column = (int)token->type;

      if (table_[state].count(column) == 0) {
        throwUnexpectedToken(token);
      }

      auto entry = table_[state].at(column);

      // Shift a token, go to state.
      if (entry.type == TE::Shift) {
        // Push token.
        tokensStack.push_back(token->value);

        // Push next state number: "s5" -> 5
        statesStack.push_back(entry.value);

        shiftedToken = token;
        token = tokenizer.getNextToken();
      }

      // Reduce by production.
      else if (entry.type == TE::Reduce) {
        auto productionNumber = entry.value;
        auto production = productions_[productionNumber];

        tokenizer.yytext = shiftedToken->value;

        auto rhsLength = production.rhsLength;
        while (rhsLength > 0) {
          statesStack.pop_back();
          rhsLength--;
        }

        // Call the handler.
        production.handler(*this);

        auto previousState = statesStack.back();

        auto symbolToReduceWith = production.opcode;
        auto nextStateEntry = table_[previousState].at(symbolToReduceWith);
        assert(nextStateEntry.type == TE::Transit);

        statesStack.push_back(nextStateEntry.value);
      }

      // Accept the string.
      else if (entry.type == TE::Accept) {
        // Pop state number.
        statesStack.pop_back();

        // Pop the parsed value.
        // clang-format off
        auto result = valuesStack.back(); valuesStack.pop_back();
        // clang-format on

        if (statesStack.size() != 1 || statesStack.back() != 0 ||
            tokenizer.hasMoreTokens()) {
          throwUnexpectedToken(token);
        }

        statesStack.pop_back();

        // clang-format off
        
        // clang-format on

        return result;
      }
    }
  }

 private:
  /**
   * Throws parser error on unexpected token.
   */
  [[noreturn]] void throwUnexpectedToken(SharedToken token) {
    if (token->type == TokenType::__EOF && !tokenizer.hasMoreTokens()) {
      std::string errMsg = "Unexpected end of input.\n";
      std::cerr << errMsg;
      std::exit(EXIT_FAILURE);
    }
    tokenizer.throwUnexpectedToken(token->value, token->startLine,
                                   token->startColumn);
  }

  // clang-format off
  static constexpr size_t PRODUCTIONS_COUNT = 72;
  static std::array<Production, PRODUCTIONS_COUNT> productions_;

  static constexpr size_t ROWS_COUNT = 121;
  static std::array<Row, ROWS_COUNT> table_;
  // clang-format on
};

// ------------------------------------------------------------------
// Productions.

// clang-format off
void _handler1(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler2(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler3(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler4(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler5(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler6(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler7(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler8(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler9(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler10(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler11(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler12(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler13(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler14(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler15(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler16(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler17(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler18(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler19(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler20(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler21(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler22(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler23(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler24(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler25(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler26(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler27(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler28(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler29(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler30(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler31(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler32(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler33(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler34(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler35(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler36(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler37(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler38(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler39(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler40(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler41(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler42(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}

void _handler43(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = _1;

 // Semantic action epilogue.
PUSH_TR();

}
// clang-format on

// clang-format off
std::array<Production, yyparse::PRODUCTIONS_COUNT> yyparse::productions_ = {{{-1, 1, &_handler1},
{0, 0, &_handler2},
{0, 2, &_handler3},
{0, 2, &_handler4},
{1, 5, &_handler5},
{2, 1, &_handler6},
{2, 3, &_handler7},
{3, 1, &_handler8},
{3, 3, &_handler9},
{4, 0, &_handler10},
{4, 1, &_handler11},
{5, 2, &_handler12},
{5, 4, &_handler13},
{6, 0, &_handler14},
{6, 1, &_handler15},
{7, 1, &_handler16},
{7, 3, &_handler17},
{8, 0, &_handler18},
{8, 1, &_handler19},
{9, 8, &_handler20},
{10, 5, &_handler21},
{10, 7, &_handler22},
{10, 5, &_handler23},
{10, 9, &_handler24},
{11, 0, &_handler25},
{11, 3, &_handler26},
{11, 2, &_handler27},
{12, 1, &_handler28},
{12, 3, &_handler29},
{13, 4, &_handler30},
{14, 1, &_handler31},
{14, 1, &_handler32},
{14, 1, &_handler33},
{14, 1, &_handler34},
{14, 1, &_handler35},
{14, 1, &_handler36},
{14, 1, &_handler37},
{14, 1, &_handler38},
{14, 1, &_handler39},
{14, 1, &_handler40},
{15, 1, &_handler41},
{15, 1, &_handler42},
{16, 1, &_handler43},
{16, 1, &_handler44},
{17, 1, &_handler45},
{17, 1, &_handler46},
{17, 1, &_handler47},
{17, 1, &_handler48},
{17, 1, &_handler49},
{17, 1, &_handler50},
{17, 1, &_handler51},
{17, 1, &_handler52},
{17, 1, &_handler53},
{17, 1, &_handler54},
{17, 1, &_handler55},
{17, 1, &_handler56},
{17, 1, &_handler57},
{18, 1, &_handler58},
{18, 1, &_handler59},
{19, 3, &_handler60},
{19, 2, &_handler61},
{19, 1, &_handler62},
{19, 3, &_handler63},
{19, 1, &_handler64},
{20, 4, &_handler65},
{20, 3, &_handler66},
{20, 2, &_handler67},
{20, 1, &_handler68},
{20, 1, &_handler69},
{20, 2, &_handler70},
{20, 1, &_handler71},
{20, 1, &_handler72}}};
// clang-format on

// ------------------------------------------------------------------
// Parsing table.

// clang-format off
std::array<Row, yyparse::ROWS_COUNT> yyparse::table_ = {
    Row {{0, {TE::Transit, 1}}, {1, {TE::Transit, 2}}, {9, {TE::Transit, 3}}, {25, {TE::Shift, 4}}, {30, {TE::Shift, 5}}, {67, {TE::Reduce, 1}}},
    Row {{67, {TE::Accept, 0}}},
    Row {{0, {TE::Transit, 6}}, {1, {TE::Transit, 2}}, {9, {TE::Transit, 3}}, {25, {TE::Shift, 4}}, {30, {TE::Shift, 5}}, {67, {TE::Reduce, 1}}},
    Row {{0, {TE::Transit, 7}}, {1, {TE::Transit, 2}}, {9, {TE::Transit, 3}}, {25, {TE::Shift, 4}}, {30, {TE::Shift, 5}}, {67, {TE::Reduce, 1}}},
    Row {{21, {TE::Shift, 8}}},
    Row {{21, {TE::Shift, 25}}},
    Row {{67, {TE::Reduce, 2}}},
    Row {{67, {TE::Reduce, 3}}},
    Row {{26, {TE::Shift, 9}}},
    Row {{2, {TE::Transit, 12}}, {3, {TE::Transit, 15}}, {4, {TE::Transit, 14}}, {5, {TE::Transit, 11}}, {6, {TE::Transit, 10}}, {21, {TE::Shift, 13}}, {27, {TE::Reduce, 13}}, {28, {TE::Reduce, 9}}},
    Row {{27, {TE::Shift, 16}}},
    Row {{27, {TE::Reduce, 14}}, {32, {TE::Reduce, 14}}},
    Row {{21, {TE::Shift, 17}}, {28, {TE::Reduce, 7/s18}}},
    Row {{21, {TE::Reduce, 5}}, {26, {TE::Reduce, 5}}, {28, {TE::Reduce, 5}}, {64, {TE::Reduce, 5}}, {65, {TE::Reduce, 5}}, {66, {TE::Reduce, 5}}},
    Row {{28, {TE::Shift, 21}}},
    Row {{28, {TE::Reduce, 10}}},
    Row {{25, {TE::Reduce, 4}}, {30, {TE::Reduce, 4}}, {67, {TE::Reduce, 4}}},
    Row {{27, {TE::Reduce, 11}}, {29, {TE::Shift, 19}}, {32, {TE::Reduce, 11}}},
    Row {{2, {TE::Transit, 24}}, {3, {TE::Transit, 23}}, {4, {TE::Transit, 14}}, {21, {TE::Shift, 13}}, {28, {TE::Reduce, 9}}},
    Row {{2, {TE::Transit, 12}}, {3, {TE::Transit, 15}}, {4, {TE::Transit, 14}}, {5, {TE::Transit, 20}}, {21, {TE::Shift, 13}}, {28, {TE::Reduce, 9}}},
    Row {{27, {TE::Reduce, 12}}, {32, {TE::Reduce, 12}}},
    Row {{2, {TE::Transit, 22}}, {3, {TE::Transit, 15}}, {4, {TE::Transit, 14}}, {21, {TE::Shift, 13}}, {28, {TE::Reduce, 9}}},
    Row {{21, {TE::Reduce, 6}}, {26, {TE::Reduce, 6}}, {28, {TE::Reduce, 6/r7/s18}}, {64, {TE::Reduce, 6}}, {65, {TE::Reduce, 6}}, {66, {TE::Reduce, 6}}},
    Row {{28, {TE::Reduce, 8/r10}}},
    Row {{28, {TE::Reduce, 7/s18}}},
    Row {{31, {TE::Shift, 26}}},
    Row {{2, {TE::Transit, 12}}, {3, {TE::Transit, 15}}, {4, {TE::Transit, 14}}, {5, {TE::Transit, 11}}, {6, {TE::Transit, 27}}, {21, {TE::Shift, 13}}, {28, {TE::Reduce, 9}}, {32, {TE::Reduce, 13}}},
    Row {{32, {TE::Shift, 28}}},
    Row {{28, {TE::Shift, 29}}},
    Row {{2, {TE::Transit, 30}}, {3, {TE::Transit, 15}}, {4, {TE::Transit, 14}}, {21, {TE::Shift, 13}}, {28, {TE::Reduce, 9}}},
    Row {{2, {TE::Transit, 34}}, {3, {TE::Transit, 15}}, {4, {TE::Transit, 14}}, {12, {TE::Transit, 31}}, {13, {TE::Transit, 36}}, {20, {TE::Transit, 32}}, {21, {TE::Shift, 35}}, {26, {TE::Shift, 33}}, {28, {TE::Reduce, 7/s18/r9}}, {64, {TE::Shift, 37}}, {65, {TE::Shift, 38}}, {66, {TE::Shift, 39}}},
    Row {{25, {TE::Reduce, 19}}, {30, {TE::Reduce, 19}}, {67, {TE::Reduce, 19}}},
    Row {{21, {TE::Reduce, 27}}, {25, {TE::Reduce, 27}}, {27, {TE::Reduce, 27}}, {28, {TE::Reduce, 27}}, {30, {TE::Reduce, 27}}, {33, {TE::Reduce, 27}}, {34, {TE::Reduce, 27}}, {35, {TE::Reduce, 27}}, {36, {TE::Reduce, 27}}, {64, {TE::Reduce, 27}}, {65, {TE::Reduce, 27}}, {66, {TE::Reduce, 27}}, {67, {TE::Reduce, 27}}},
    Row {{2, {TE::Transit, 34}}, {3, {TE::Transit, 15}}, {4, {TE::Transit, 14}}, {10, {TE::Transit, 42}}, {11, {TE::Transit, 40}}, {13, {TE::Transit, 36}}, {20, {TE::Transit, 41}}, {21, {TE::Shift, 35}}, {27, {TE::Reduce, 24}}, {28, {TE::Reduce, 9}}, {33, {TE::Shift, 43}}, {35, {TE::Shift, 44}}, {36, {TE::Shift, 45}}, {64, {TE::Shift, 37}}, {65, {TE::Shift, 38}}, {66, {TE::Shift, 39}}},
    Row {{21, {TE::Shift, 50}}, {28, {TE::Reduce, 7/s18}}},
    Row {{14, {TE::Transit, 87}}, {15, {TE::Transit, 88}}, {21, {TE::Reduce, 5}}, {28, {TE::Reduce, 5}}, {31, {TE::Shift, 80}}, {38, {TE::Shift, 89}}, {39, {TE::Shift, 90}}, {40, {TE::Shift, 91}}, {41, {TE::Shift, 92}}, {42, {TE::Shift, 93}}, {43, {TE::Shift, 94}}, {44, {TE::Shift, 95}}, {45, {TE::Shift, 96}}, {46, {TE::Shift, 97}}, {47, {TE::Shift, 98}}, {48, {TE::Shift, 99}}, {49, {TE::Shift, 100}}},
    Row {{21, {TE::Reduce, 67}}, {25, {TE::Reduce, 67}}, {27, {TE::Reduce, 67}}, {28, {TE::Reduce, 67}}, {30, {TE::Reduce, 67}}, {33, {TE::Reduce, 67}}, {34, {TE::Reduce, 67}}, {35, {TE::Reduce, 67}}, {36, {TE::Reduce, 67}}, {37, {TE::Reduce, 67}}, {64, {TE::Reduce, 67}}, {65, {TE::Reduce, 67}}, {66, {TE::Reduce, 67}}, {67, {TE::Reduce, 67}}},
    Row {{13, {TE::Transit, 54}}, {16, {TE::Transit, 53}}, {18, {TE::Transit, 56}}, {19, {TE::Transit, 102}}, {21, {TE::Reduce, 68/s59}}, {23, {TE::Shift, 60}}, {24, {TE::Shift, 61}}, {25, {TE::Reduce, 68}}, {27, {TE::Reduce, 68}}, {28, {TE::Reduce, 68}}, {30, {TE::Reduce, 68}}, {31, {TE::Shift, 55}}, {33, {TE::Reduce, 68}}, {34, {TE::Reduce, 68}}, {35, {TE::Reduce, 68}}, {36, {TE::Reduce, 68}}, {37, {TE::Reduce, 68}}, {50, {TE::Shift, 57}}, {51, {TE::Shift, 58}}, {64, {TE::Reduce, 68}}, {65, {TE::Reduce, 68}}, {66, {TE::Reduce, 68}}, {67, {TE::Reduce, 68}}},
    Row {{21, {TE::Reduce, 70}}, {25, {TE::Reduce, 70}}, {27, {TE::Reduce, 70}}, {28, {TE::Reduce, 70}}, {30, {TE::Reduce, 70}}, {33, {TE::Reduce, 70}}, {34, {TE::Reduce, 70}}, {35, {TE::Reduce, 70}}, {36, {TE::Reduce, 70}}, {37, {TE::Reduce, 70}}, {64, {TE::Reduce, 70}}, {65, {TE::Reduce, 70}}, {66, {TE::Reduce, 70}}, {67, {TE::Reduce, 70}}},
    Row {{21, {TE::Reduce, 71}}, {25, {TE::Reduce, 71}}, {27, {TE::Reduce, 71}}, {28, {TE::Reduce, 71}}, {30, {TE::Reduce, 71}}, {33, {TE::Reduce, 71}}, {34, {TE::Reduce, 71}}, {35, {TE::Reduce, 71}}, {36, {TE::Reduce, 71}}, {37, {TE::Reduce, 71}}, {64, {TE::Reduce, 71}}, {65, {TE::Reduce, 71}}, {66, {TE::Reduce, 71}}, {67, {TE::Reduce, 71}}},
    Row {{27, {TE::Shift, 46}}},
    Row {{37, {TE::Shift, 47}}},
    Row {{2, {TE::Transit, 34}}, {3, {TE::Transit, 15}}, {4, {TE::Transit, 14}}, {10, {TE::Transit, 42}}, {11, {TE::Transit, 49}}, {13, {TE::Transit, 36}}, {20, {TE::Transit, 41}}, {21, {TE::Shift, 35}}, {27, {TE::Reduce, 24}}, {28, {TE::Reduce, 9}}, {33, {TE::Shift, 43}}, {35, {TE::Shift, 44}}, {36, {TE::Shift, 45}}, {64, {TE::Shift, 37}}, {65, {TE::Shift, 38}}, {66, {TE::Shift, 39}}},
    Row {{31, {TE::Shift, 103}}},
    Row {{31, {TE::Shift, 109}}},
    Row {{31, {TE::Shift, 113}}},
    Row {{21, {TE::Reduce, 28}}, {25, {TE::Reduce, 28}}, {27, {TE::Reduce, 28}}, {28, {TE::Reduce, 28}}, {30, {TE::Reduce, 28}}, {33, {TE::Reduce, 28}}, {34, {TE::Reduce, 28}}, {35, {TE::Reduce, 28}}, {36, {TE::Reduce, 28}}, {64, {TE::Reduce, 28}}, {65, {TE::Reduce, 28}}, {66, {TE::Reduce, 28}}, {67, {TE::Reduce, 28}}},
    Row {{2, {TE::Transit, 34}}, {3, {TE::Transit, 15}}, {4, {TE::Transit, 14}}, {10, {TE::Transit, 42}}, {11, {TE::Transit, 48}}, {13, {TE::Transit, 36}}, {20, {TE::Transit, 41}}, {21, {TE::Shift, 35}}, {27, {TE::Reduce, 24}}, {28, {TE::Reduce, 9}}, {33, {TE::Shift, 43}}, {35, {TE::Shift, 44}}, {36, {TE::Shift, 45}}, {64, {TE::Shift, 37}}, {65, {TE::Shift, 38}}, {66, {TE::Shift, 39}}},
    Row {{27, {TE::Reduce, 25}}},
    Row {{27, {TE::Reduce, 26}}},
    Row {{38, {TE::Shift, 51}}},
    Row {{13, {TE::Transit, 54}}, {16, {TE::Transit, 53}}, {18, {TE::Transit, 56}}, {19, {TE::Transit, 52}}, {21, {TE::Shift, 59}}, {23, {TE::Shift, 60}}, {24, {TE::Shift, 61}}, {31, {TE::Shift, 55}}, {50, {TE::Shift, 57}}, {51, {TE::Shift, 58}}},
    Row {{17, {TE::Transit, 62}}, {21, {TE::Reduce, 64}}, {25, {TE::Reduce, 64}}, {27, {TE::Reduce, 64}}, {28, {TE::Reduce, 64}}, {30, {TE::Reduce, 64}}, {33, {TE::Reduce, 64}}, {34, {TE::Reduce, 64}}, {35, {TE::Reduce, 64}}, {36, {TE::Reduce, 64}}, {37, {TE::Reduce, 64}}, {51, {TE::Shift, 64}}, {52, {TE::Shift, 63}}, {53, {TE::Shift, 65}}, {54, {TE::Shift, 66}}, {55, {TE::Shift, 67}}, {56, {TE::Shift, 68}}, {57, {TE::Shift, 69}}, {58, {TE::Shift, 70}}, {59, {TE::Shift, 71}}, {60, {TE::Shift, 72}}, {61, {TE::Shift, 73}}, {62, {TE::Shift, 74}}, {63, {TE::Shift, 75}}, {64, {TE::Reduce, 64}}, {65, {TE::Reduce, 64}}, {66, {TE::Reduce, 64}}, {67, {TE::Reduce, 64}}},
    Row {{13, {TE::Transit, 54}}, {16, {TE::Transit, 53}}, {18, {TE::Transit, 56}}, {19, {TE::Transit, 77}}, {21, {TE::Shift, 59}}, {23, {TE::Shift, 60}}, {24, {TE::Shift, 61}}, {31, {TE::Shift, 55}}, {50, {TE::Shift, 57}}, {51, {TE::Shift, 58}}},
    Row {{21, {TE::Reduce, 61}}, {25, {TE::Reduce, 61}}, {27, {TE::Reduce, 61}}, {28, {TE::Reduce, 61}}, {30, {TE::Reduce, 61}}, {32, {TE::Reduce, 61}}, {33, {TE::Reduce, 61}}, {34, {TE::Reduce, 61}}, {35, {TE::Reduce, 61}}, {36, {TE::Reduce, 61}}, {37, {TE::Reduce, 61}}, {51, {TE::Reduce, 61}}, {52, {TE::Reduce, 61}}, {53, {TE::Reduce, 61}}, {54, {TE::Reduce, 61}}, {55, {TE::Reduce, 61}}, {56, {TE::Reduce, 61}}, {57, {TE::Reduce, 61}}, {58, {TE::Reduce, 61}}, {59, {TE::Reduce, 61}}, {60, {TE::Reduce, 61}}, {61, {TE::Reduce, 61}}, {62, {TE::Reduce, 61}}, {63, {TE::Reduce, 61}}, {64, {TE::Reduce, 61}}, {65, {TE::Reduce, 61}}, {66, {TE::Reduce, 61}}, {67, {TE::Reduce, 61}}},
    Row {{13, {TE::Transit, 54}}, {16, {TE::Transit, 53}}, {18, {TE::Transit, 56}}, {19, {TE::Transit, 78}}, {21, {TE::Shift, 59}}, {23, {TE::Shift, 60}}, {24, {TE::Shift, 61}}, {31, {TE::Shift, 55}}, {50, {TE::Shift, 57}}, {51, {TE::Shift, 58}}},
    Row {{21, {TE::Reduce, 63}}, {25, {TE::Reduce, 63}}, {27, {TE::Reduce, 63}}, {28, {TE::Reduce, 63}}, {30, {TE::Reduce, 63}}, {32, {TE::Reduce, 63}}, {33, {TE::Reduce, 63}}, {34, {TE::Reduce, 63}}, {35, {TE::Reduce, 63}}, {36, {TE::Reduce, 63}}, {37, {TE::Reduce, 63}}, {51, {TE::Reduce, 63}}, {52, {TE::Reduce, 63}}, {53, {TE::Reduce, 63}}, {54, {TE::Reduce, 63}}, {55, {TE::Reduce, 63}}, {56, {TE::Reduce, 63}}, {57, {TE::Reduce, 63}}, {58, {TE::Reduce, 63}}, {59, {TE::Reduce, 63}}, {60, {TE::Reduce, 63}}, {61, {TE::Reduce, 63}}, {62, {TE::Reduce, 63}}, {63, {TE::Reduce, 63}}, {64, {TE::Reduce, 63}}, {65, {TE::Reduce, 63}}, {66, {TE::Reduce, 63}}, {67, {TE::Reduce, 63}}},
    Row {{21, {TE::Reduce, 42}}, {23, {TE::Reduce, 42}}, {24, {TE::Reduce, 42}}, {31, {TE::Reduce, 42}}, {50, {TE::Reduce, 42}}, {51, {TE::Reduce, 42}}},
    Row {{21, {TE::Reduce, 43}}, {23, {TE::Reduce, 43}}, {24, {TE::Reduce, 43}}, {31, {TE::Reduce, 43}}, {50, {TE::Reduce, 43}}, {51, {TE::Reduce, 43}}},
    Row {{31, {TE::Shift, 80}}},
    Row {{21, {TE::Reduce, 57}}, {25, {TE::Reduce, 57}}, {27, {TE::Reduce, 57}}, {28, {TE::Reduce, 57}}, {30, {TE::Reduce, 57}}, {32, {TE::Reduce, 57}}, {33, {TE::Reduce, 57}}, {34, {TE::Reduce, 57}}, {35, {TE::Reduce, 57}}, {36, {TE::Reduce, 57}}, {37, {TE::Reduce, 57}}, {51, {TE::Reduce, 57}}, {52, {TE::Reduce, 57}}, {53, {TE::Reduce, 57}}, {54, {TE::Reduce, 57}}, {55, {TE::Reduce, 57}}, {56, {TE::Reduce, 57}}, {57, {TE::Reduce, 57}}, {58, {TE::Reduce, 57}}, {59, {TE::Reduce, 57}}, {60, {TE::Reduce, 57}}, {61, {TE::Reduce, 57}}, {62, {TE::Reduce, 57}}, {63, {TE::Reduce, 57}}, {64, {TE::Reduce, 57}}, {65, {TE::Reduce, 57}}, {66, {TE::Reduce, 57}}, {67, {TE::Reduce, 57}}},
    Row {{21, {TE::Reduce, 58}}, {25, {TE::Reduce, 58}}, {27, {TE::Reduce, 58}}, {28, {TE::Reduce, 58}}, {30, {TE::Reduce, 58}}, {32, {TE::Reduce, 58}}, {33, {TE::Reduce, 58}}, {34, {TE::Reduce, 58}}, {35, {TE::Reduce, 58}}, {36, {TE::Reduce, 58}}, {37, {TE::Reduce, 58}}, {51, {TE::Reduce, 58}}, {52, {TE::Reduce, 58}}, {53, {TE::Reduce, 58}}, {54, {TE::Reduce, 58}}, {55, {TE::Reduce, 58}}, {56, {TE::Reduce, 58}}, {57, {TE::Reduce, 58}}, {58, {TE::Reduce, 58}}, {59, {TE::Reduce, 58}}, {60, {TE::Reduce, 58}}, {61, {TE::Reduce, 58}}, {62, {TE::Reduce, 58}}, {63, {TE::Reduce, 58}}, {64, {TE::Reduce, 58}}, {65, {TE::Reduce, 58}}, {66, {TE::Reduce, 58}}, {67, {TE::Reduce, 58}}},
    Row {{13, {TE::Transit, 54}}, {16, {TE::Transit, 53}}, {18, {TE::Transit, 56}}, {19, {TE::Transit, 76}}, {21, {TE::Shift, 59}}, {23, {TE::Shift, 60}}, {24, {TE::Shift, 61}}, {31, {TE::Shift, 55}}, {50, {TE::Shift, 57}}, {51, {TE::Shift, 58}}},
    Row {{21, {TE::Reduce, 44}}, {23, {TE::Reduce, 44}}, {24, {TE::Reduce, 44}}, {31, {TE::Reduce, 44}}, {50, {TE::Reduce, 44}}, {51, {TE::Reduce, 44}}},
    Row {{21, {TE::Reduce, 45}}, {23, {TE::Reduce, 45}}, {24, {TE::Reduce, 45}}, {31, {TE::Reduce, 45}}, {50, {TE::Reduce, 45}}, {51, {TE::Reduce, 45}}},
    Row {{21, {TE::Reduce, 46}}, {23, {TE::Reduce, 46}}, {24, {TE::Reduce, 46}}, {31, {TE::Reduce, 46}}, {50, {TE::Reduce, 46}}, {51, {TE::Reduce, 46}}},
    Row {{21, {TE::Reduce, 47}}, {23, {TE::Reduce, 47}}, {24, {TE::Reduce, 47}}, {31, {TE::Reduce, 47}}, {50, {TE::Reduce, 47}}, {51, {TE::Reduce, 47}}},
    Row {{21, {TE::Reduce, 48}}, {23, {TE::Reduce, 48}}, {24, {TE::Reduce, 48}}, {31, {TE::Reduce, 48}}, {50, {TE::Reduce, 48}}, {51, {TE::Reduce, 48}}},
    Row {{21, {TE::Reduce, 49}}, {23, {TE::Reduce, 49}}, {24, {TE::Reduce, 49}}, {31, {TE::Reduce, 49}}, {50, {TE::Reduce, 49}}, {51, {TE::Reduce, 49}}},
    Row {{21, {TE::Reduce, 50}}, {23, {TE::Reduce, 50}}, {24, {TE::Reduce, 50}}, {31, {TE::Reduce, 50}}, {50, {TE::Reduce, 50}}, {51, {TE::Reduce, 50}}},
    Row {{21, {TE::Reduce, 51}}, {23, {TE::Reduce, 51}}, {24, {TE::Reduce, 51}}, {31, {TE::Reduce, 51}}, {50, {TE::Reduce, 51}}, {51, {TE::Reduce, 51}}},
    Row {{21, {TE::Reduce, 52}}, {23, {TE::Reduce, 52}}, {24, {TE::Reduce, 52}}, {31, {TE::Reduce, 52}}, {50, {TE::Reduce, 52}}, {51, {TE::Reduce, 52}}},
    Row {{21, {TE::Reduce, 53}}, {23, {TE::Reduce, 53}}, {24, {TE::Reduce, 53}}, {31, {TE::Reduce, 53}}, {50, {TE::Reduce, 53}}, {51, {TE::Reduce, 53}}},
    Row {{21, {TE::Reduce, 54}}, {23, {TE::Reduce, 54}}, {24, {TE::Reduce, 54}}, {31, {TE::Reduce, 54}}, {50, {TE::Reduce, 54}}, {51, {TE::Reduce, 54}}},
    Row {{21, {TE::Reduce, 55}}, {23, {TE::Reduce, 55}}, {24, {TE::Reduce, 55}}, {31, {TE::Reduce, 55}}, {50, {TE::Reduce, 55}}, {51, {TE::Reduce, 55}}},
    Row {{21, {TE::Reduce, 56}}, {23, {TE::Reduce, 56}}, {24, {TE::Reduce, 56}}, {31, {TE::Reduce, 56}}, {50, {TE::Reduce, 56}}, {51, {TE::Reduce, 56}}},
    Row {{17, {TE::Transit, 62}}, {21, {TE::Reduce, 59}}, {25, {TE::Reduce, 59}}, {27, {TE::Reduce, 59}}, {28, {TE::Reduce, 59}}, {30, {TE::Reduce, 59}}, {32, {TE::Reduce, 59}}, {33, {TE::Reduce, 59}}, {34, {TE::Reduce, 59}}, {35, {TE::Reduce, 59}}, {36, {TE::Reduce, 59}}, {37, {TE::Reduce, 59}}, {51, {TE::Reduce, 59/s64}}, {52, {TE::Reduce, 59/s63}}, {53, {TE::Reduce, 59/s65}}, {54, {TE::Reduce, 59/s66}}, {55, {TE::Reduce, 59/s67}}, {56, {TE::Reduce, 59/s68}}, {57, {TE::Reduce, 59/s69}}, {58, {TE::Reduce, 59/s70}}, {59, {TE::Reduce, 59/s71}}, {60, {TE::Reduce, 59/s72}}, {61, {TE::Reduce, 59/s73}}, {62, {TE::Reduce, 59/s74}}, {63, {TE::Reduce, 59/s75}}, {64, {TE::Reduce, 59}}, {65, {TE::Reduce, 59}}, {66, {TE::Reduce, 59}}, {67, {TE::Reduce, 59}}},
    Row {{17, {TE::Transit, 62}}, {21, {TE::Reduce, 60}}, {25, {TE::Reduce, 60}}, {27, {TE::Reduce, 60}}, {28, {TE::Reduce, 60}}, {30, {TE::Reduce, 60}}, {32, {TE::Reduce, 60}}, {33, {TE::Reduce, 60}}, {34, {TE::Reduce, 60}}, {35, {TE::Reduce, 60}}, {36, {TE::Reduce, 60}}, {37, {TE::Reduce, 60}}, {51, {TE::Reduce, 60/s64}}, {52, {TE::Reduce, 60/s63}}, {53, {TE::Reduce, 60/s65}}, {54, {TE::Reduce, 60/s66}}, {55, {TE::Reduce, 60/s67}}, {56, {TE::Reduce, 60/s68}}, {57, {TE::Reduce, 60/s69}}, {58, {TE::Reduce, 60/s70}}, {59, {TE::Reduce, 60/s71}}, {60, {TE::Reduce, 60/s72}}, {61, {TE::Reduce, 60/s73}}, {62, {TE::Reduce, 60/s74}}, {63, {TE::Reduce, 60/s75}}, {64, {TE::Reduce, 60}}, {65, {TE::Reduce, 60}}, {66, {TE::Reduce, 60}}, {67, {TE::Reduce, 60}}},
    Row {{17, {TE::Transit, 62}}, {32, {TE::Shift, 79}}, {51, {TE::Shift, 64}}, {52, {TE::Shift, 63}}, {53, {TE::Shift, 65}}, {54, {TE::Shift, 66}}, {55, {TE::Shift, 67}}, {56, {TE::Shift, 68}}, {57, {TE::Shift, 69}}, {58, {TE::Shift, 70}}, {59, {TE::Shift, 71}}, {60, {TE::Shift, 72}}, {61, {TE::Shift, 73}}, {62, {TE::Shift, 74}}, {63, {TE::Shift, 75}}},
    Row {{21, {TE::Reduce, 62}}, {25, {TE::Reduce, 62}}, {27, {TE::Reduce, 62}}, {28, {TE::Reduce, 62}}, {30, {TE::Reduce, 62}}, {32, {TE::Reduce, 62}}, {33, {TE::Reduce, 62}}, {34, {TE::Reduce, 62}}, {35, {TE::Reduce, 62}}, {36, {TE::Reduce, 62}}, {37, {TE::Reduce, 62}}, {51, {TE::Reduce, 62}}, {52, {TE::Reduce, 62}}, {53, {TE::Reduce, 62}}, {54, {TE::Reduce, 62}}, {55, {TE::Reduce, 62}}, {56, {TE::Reduce, 62}}, {57, {TE::Reduce, 62}}, {58, {TE::Reduce, 62}}, {59, {TE::Reduce, 62}}, {60, {TE::Reduce, 62}}, {61, {TE::Reduce, 62}}, {62, {TE::Reduce, 62}}, {63, {TE::Reduce, 62}}, {64, {TE::Reduce, 62}}, {65, {TE::Reduce, 62}}, {66, {TE::Reduce, 62}}, {67, {TE::Reduce, 62}}},
    Row {{7, {TE::Transit, 82}}, {8, {TE::Transit, 81}}, {21, {TE::Shift, 83}}, {32, {TE::Reduce, 17}}},
    Row {{32, {TE::Shift, 84}}},
    Row {{32, {TE::Reduce, 18}}},
    Row {{29, {TE::Shift, 85}}, {32, {TE::Reduce, 15}}},
    Row {{21, {TE::Reduce, 29}}, {25, {TE::Reduce, 29}}, {27, {TE::Reduce, 29}}, {28, {TE::Reduce, 29}}, {30, {TE::Reduce, 29}}, {32, {TE::Reduce, 29}}, {33, {TE::Reduce, 29}}, {34, {TE::Reduce, 29}}, {35, {TE::Reduce, 29}}, {36, {TE::Reduce, 29}}, {37, {TE::Reduce, 29}}, {51, {TE::Reduce, 29}}, {52, {TE::Reduce, 29}}, {53, {TE::Reduce, 29}}, {54, {TE::Reduce, 29}}, {55, {TE::Reduce, 29}}, {56, {TE::Reduce, 29}}, {57, {TE::Reduce, 29}}, {58, {TE::Reduce, 29}}, {59, {TE::Reduce, 29}}, {60, {TE::Reduce, 29}}, {61, {TE::Reduce, 29}}, {62, {TE::Reduce, 29}}, {63, {TE::Reduce, 29}}, {64, {TE::Reduce, 29}}, {65, {TE::Reduce, 29}}, {66, {TE::Reduce, 29}}, {67, {TE::Reduce, 29}}},
    Row {{7, {TE::Transit, 86}}, {21, {TE::Shift, 83}}},
    Row {{32, {TE::Reduce, 16}}},
    Row {{13, {TE::Transit, 54}}, {16, {TE::Transit, 53}}, {18, {TE::Transit, 56}}, {19, {TE::Transit, 101}}, {21, {TE::Shift, 59}}, {23, {TE::Shift, 60}}, {24, {TE::Shift, 61}}, {31, {TE::Shift, 55}}, {50, {TE::Shift, 57}}, {51, {TE::Shift, 58}}},
    Row {{21, {TE::Reduce, 66}}, {25, {TE::Reduce, 66}}, {27, {TE::Reduce, 66}}, {28, {TE::Reduce, 66}}, {30, {TE::Reduce, 66}}, {33, {TE::Reduce, 66}}, {34, {TE::Reduce, 66}}, {35, {TE::Reduce, 66}}, {36, {TE::Reduce, 66}}, {37, {TE::Reduce, 66}}, {64, {TE::Reduce, 66}}, {65, {TE::Reduce, 66}}, {66, {TE::Reduce, 66}}, {67, {TE::Reduce, 66}}},
    Row {{21, {TE::Reduce, 30}}, {23, {TE::Reduce, 30}}, {24, {TE::Reduce, 30}}, {31, {TE::Reduce, 30}}, {50, {TE::Reduce, 30}}, {51, {TE::Reduce, 30}}},
    Row {{21, {TE::Reduce, 31}}, {23, {TE::Reduce, 31}}, {24, {TE::Reduce, 31}}, {31, {TE::Reduce, 31}}, {50, {TE::Reduce, 31}}, {51, {TE::Reduce, 31}}},
    Row {{21, {TE::Reduce, 32}}, {23, {TE::Reduce, 32}}, {24, {TE::Reduce, 32}}, {31, {TE::Reduce, 32}}, {50, {TE::Reduce, 32}}, {51, {TE::Reduce, 32}}},
    Row {{21, {TE::Reduce, 33}}, {23, {TE::Reduce, 33}}, {24, {TE::Reduce, 33}}, {31, {TE::Reduce, 33}}, {50, {TE::Reduce, 33}}, {51, {TE::Reduce, 33}}},
    Row {{21, {TE::Reduce, 34}}, {23, {TE::Reduce, 34}}, {24, {TE::Reduce, 34}}, {31, {TE::Reduce, 34}}, {50, {TE::Reduce, 34}}, {51, {TE::Reduce, 34}}},
    Row {{21, {TE::Reduce, 35}}, {23, {TE::Reduce, 35}}, {24, {TE::Reduce, 35}}, {31, {TE::Reduce, 35}}, {50, {TE::Reduce, 35}}, {51, {TE::Reduce, 35}}},
    Row {{21, {TE::Reduce, 36}}, {23, {TE::Reduce, 36}}, {24, {TE::Reduce, 36}}, {31, {TE::Reduce, 36}}, {50, {TE::Reduce, 36}}, {51, {TE::Reduce, 36}}},
    Row {{21, {TE::Reduce, 37}}, {23, {TE::Reduce, 37}}, {24, {TE::Reduce, 37}}, {31, {TE::Reduce, 37}}, {50, {TE::Reduce, 37}}, {51, {TE::Reduce, 37}}},
    Row {{21, {TE::Reduce, 38}}, {23, {TE::Reduce, 38}}, {24, {TE::Reduce, 38}}, {31, {TE::Reduce, 38}}, {50, {TE::Reduce, 38}}, {51, {TE::Reduce, 38}}},
    Row {{21, {TE::Reduce, 39}}, {23, {TE::Reduce, 39}}, {24, {TE::Reduce, 39}}, {31, {TE::Reduce, 39}}, {50, {TE::Reduce, 39}}, {51, {TE::Reduce, 39}}},
    Row {{21, {TE::Reduce, 40}}, {25, {TE::Reduce, 40}}, {27, {TE::Reduce, 40}}, {28, {TE::Reduce, 40}}, {30, {TE::Reduce, 40}}, {33, {TE::Reduce, 40}}, {34, {TE::Reduce, 40}}, {35, {TE::Reduce, 40}}, {36, {TE::Reduce, 40}}, {37, {TE::Reduce, 40}}, {64, {TE::Reduce, 40}}, {65, {TE::Reduce, 40}}, {66, {TE::Reduce, 40}}, {67, {TE::Reduce, 40}}},
    Row {{21, {TE::Reduce, 41}}, {25, {TE::Reduce, 41}}, {27, {TE::Reduce, 41}}, {28, {TE::Reduce, 41}}, {30, {TE::Reduce, 41}}, {33, {TE::Reduce, 41}}, {34, {TE::Reduce, 41}}, {35, {TE::Reduce, 41}}, {36, {TE::Reduce, 41}}, {37, {TE::Reduce, 41}}, {64, {TE::Reduce, 41}}, {65, {TE::Reduce, 41}}, {66, {TE::Reduce, 41}}, {67, {TE::Reduce, 41}}},
    Row {{17, {TE::Transit, 62}}, {21, {TE::Reduce, 65}}, {25, {TE::Reduce, 65}}, {27, {TE::Reduce, 65}}, {28, {TE::Reduce, 65}}, {30, {TE::Reduce, 65}}, {33, {TE::Reduce, 65}}, {34, {TE::Reduce, 65}}, {35, {TE::Reduce, 65}}, {36, {TE::Reduce, 65}}, {37, {TE::Reduce, 65}}, {51, {TE::Shift, 64}}, {52, {TE::Shift, 63}}, {53, {TE::Shift, 65}}, {54, {TE::Shift, 66}}, {55, {TE::Shift, 67}}, {56, {TE::Shift, 68}}, {57, {TE::Shift, 69}}, {58, {TE::Shift, 70}}, {59, {TE::Shift, 71}}, {60, {TE::Shift, 72}}, {61, {TE::Shift, 73}}, {62, {TE::Shift, 74}}, {63, {TE::Shift, 75}}, {64, {TE::Reduce, 65}}, {65, {TE::Reduce, 65}}, {66, {TE::Reduce, 65}}, {67, {TE::Reduce, 65}}},
    Row {{17, {TE::Transit, 62}}, {21, {TE::Reduce, 69}}, {25, {TE::Reduce, 69}}, {27, {TE::Reduce, 69}}, {28, {TE::Reduce, 69}}, {30, {TE::Reduce, 69}}, {33, {TE::Reduce, 69}}, {34, {TE::Reduce, 69}}, {35, {TE::Reduce, 69}}, {36, {TE::Reduce, 69}}, {37, {TE::Reduce, 69}}, {51, {TE::Shift, 64}}, {52, {TE::Shift, 63}}, {53, {TE::Shift, 65}}, {54, {TE::Shift, 66}}, {55, {TE::Shift, 67}}, {56, {TE::Shift, 68}}, {57, {TE::Shift, 69}}, {58, {TE::Shift, 70}}, {59, {TE::Shift, 71}}, {60, {TE::Shift, 72}}, {61, {TE::Shift, 73}}, {62, {TE::Shift, 74}}, {63, {TE::Shift, 75}}, {64, {TE::Reduce, 69}}, {65, {TE::Reduce, 69}}, {66, {TE::Reduce, 69}}, {67, {TE::Reduce, 69}}},
    Row {{22, {TE::Shift, 104}}},
    Row {{32, {TE::Shift, 105}}},
    Row {{2, {TE::Transit, 34}}, {3, {TE::Transit, 15}}, {4, {TE::Transit, 14}}, {12, {TE::Transit, 106}}, {13, {TE::Transit, 36}}, {20, {TE::Transit, 32}}, {21, {TE::Shift, 35}}, {26, {TE::Shift, 33}}, {28, {TE::Reduce, 9}}, {64, {TE::Shift, 37}}, {65, {TE::Shift, 38}}, {66, {TE::Shift, 39}}},
    Row {{21, {TE::Reduce, 20}}, {27, {TE::Reduce, 20}}, {28, {TE::Reduce, 20}}, {33, {TE::Reduce, 20}}, {34, {TE::Shift, 107}}, {35, {TE::Reduce, 20}}, {36, {TE::Reduce, 20}}, {64, {TE::Reduce, 20}}, {65, {TE::Reduce, 20}}, {66, {TE::Reduce, 20}}},
    Row {{2, {TE::Transit, 34}}, {3, {TE::Transit, 15}}, {4, {TE::Transit, 14}}, {12, {TE::Transit, 108}}, {13, {TE::Transit, 36}}, {20, {TE::Transit, 32}}, {21, {TE::Shift, 35}}, {26, {TE::Shift, 33}}, {28, {TE::Reduce, 9}}, {64, {TE::Shift, 37}}, {65, {TE::Shift, 38}}, {66, {TE::Shift, 39}}},
    Row {{21, {TE::Reduce, 21}}, {27, {TE::Reduce, 21}}, {28, {TE::Reduce, 21}}, {33, {TE::Reduce, 21}}, {35, {TE::Reduce, 21}}, {36, {TE::Reduce, 21}}, {64, {TE::Reduce, 21}}, {65, {TE::Reduce, 21}}, {66, {TE::Reduce, 21}}},
    Row {{22, {TE::Shift, 110}}},
    Row {{32, {TE::Shift, 111}}},
    Row {{2, {TE::Transit, 34}}, {3, {TE::Transit, 15}}, {4, {TE::Transit, 14}}, {12, {TE::Transit, 112}}, {13, {TE::Transit, 36}}, {20, {TE::Transit, 32}}, {21, {TE::Shift, 35}}, {26, {TE::Shift, 33}}, {28, {TE::Reduce, 9}}, {64, {TE::Shift, 37}}, {65, {TE::Shift, 38}}, {66, {TE::Shift, 39}}},
    Row {{21, {TE::Reduce, 22}}, {27, {TE::Reduce, 22}}, {28, {TE::Reduce, 22}}, {33, {TE::Reduce, 22}}, {35, {TE::Reduce, 22}}, {36, {TE::Reduce, 22}}, {64, {TE::Reduce, 22}}, {65, {TE::Reduce, 22}}, {66, {TE::Reduce, 22}}},
    Row {{22, {TE::Shift, 114}}},
    Row {{37, {TE::Shift, 115}}},
    Row {{22, {TE::Shift, 116}}},
    Row {{37, {TE::Shift, 117}}},
    Row {{22, {TE::Shift, 118}}},
    Row {{32, {TE::Shift, 119}}},
    Row {{2, {TE::Transit, 34}}, {3, {TE::Transit, 15}}, {4, {TE::Transit, 14}}, {12, {TE::Transit, 120}}, {13, {TE::Transit, 36}}, {20, {TE::Transit, 32}}, {21, {TE::Shift, 35}}, {26, {TE::Shift, 33}}, {28, {TE::Reduce, 9}}, {64, {TE::Shift, 37}}, {65, {TE::Shift, 38}}, {66, {TE::Shift, 39}}},
    Row {{21, {TE::Reduce, 23}}, {27, {TE::Reduce, 23}}, {28, {TE::Reduce, 23}}, {33, {TE::Reduce, 23}}, {35, {TE::Reduce, 23}}, {36, {TE::Reduce, 23}}, {64, {TE::Reduce, 23}}, {65, {TE::Reduce, 23}}, {66, {TE::Reduce, 23}}}
};
// clang-format on

}  // namespace syntax

#endif